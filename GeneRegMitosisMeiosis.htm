<html>

<head>
    <style>
        #headertext {
            height: 30%;
            width: 100%;
            text-align: center;
            font-size: 200%;
            background-image: url('/static/mitose.png');
            background-size: 100% 100%;
            border: 2px solid black;
        }

        #text {
            width: 60%;
            left: 20%;
            top: 30%;
        }

        /* Dropdown Button */
        .dropbtn {
            top: 10px;
            left: 10px;
            background-color: Black;
            color: white;
            padding: 16px;
            font-size: 16px;
            border: none;
        }

        /* The container <div> - needed to position the dropdown content */
        .dropdown {
            position: relative;
            display: inline-block;
            float: left;
        }

        /* Dropdown Content (Hidden by Default) */
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
            z-index: 1;
            font-size: 50%;
        }

        /* Links inside the dropdown */
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

        /* Change color of dropdown links on hover */
        .dropdown-content a:hover {
            background-color: #ddd;
        }

        /* Show the dropdown menu on hover */
        .dropdown:hover .dropdown-content {
            display: block;
        }

        /* Change the background color of the dropdown button when the dropdown content is shown */
        .dropdown:hover .dropbtn {
            background-color: #3e8e41;
        }

        .chapter {
            border-bottom: 2px solid black;
            font-size: 200%;
            font-display: bold;
        }

        .term {
            width: 48%;
            display: inline-block;
        }

        .def {
            width: 48%;
            display: inline-block;
            background-color: black;
        }

        .spacer {
            height: 10px;
            border-bottom: 1px solid black;
        }

        .bigspacer {
            height: 40px;
        }

        #def5h {
            background-color: white;
            width: 24%;
        }

        #def5hh {
            background-color: white;
            width: 24%;
        }

        #container {
            background-color: white;
            width: 0%;
            height: 0%;
            position: fixed;
            top: 2px;
            left: 2px;
            display: none;
        }

        #X {
            position: absolute;
            top: 0;
            right: 0;
        }

        #drawingpane {
            width: 1000px;
            height: 300px;
            border: 2px solid black;
            display: inline;
        }

        #pause {
            display: none;
        }

        #resume {
            display: none;
        }

        #txt {
            height: 120px;
            font-size: 50px;
            color: green;
        }

        #flex {
            display: flex;
        }

        #text {
            width: 200px;
            display: inline;
        }

        #legend {
            background-color: black;
        }
    </style>
</head>

<body>

    <div id="headertext"> Gene Control, Mitosis, Meiosis (Chapters 10-12)
        <div class="dropdown">
            <button class="dropbtn">Menu</button>
            <div class="dropdown-content">
                <a href="/start">Home Page</a>
                <a href="/molecules">Molecules of Life</a>
                <a href="/photo">Metabolism and Photosynthesis</a>
                <a href="/resp">Aerobic Respiration, Molecular Gen</a>
                <a href="/genereg">Gene Regulation, Mitosis, Meiosis</a>
                <a href="/mend">Mendelian Genetics, Biotech</a>
                <a href="/evo">Evolution</a>
                <a href="/nerv">Nervous and Endocrine System</a>
                <a href="/immune">Immune System and Development</a>
                <a href="/eco">Ecology</a>
            </div>
        </div>
    </div>

    <button id='startanimation' onclick='lick()'>Start Animation</button>
    <button id='pause' onclick='pau()'>Pause</button>
    <button id='resume' onclick='resume()'>Resume</button>

    <div id='flex'>
        <canvas id='drawingpane'></canvas>
        <div id='legend'>
            <div style='color:red;'>Red = Guanine; </div>
            <div style='color:Green;'' > Green = Cytosine;</div>
            <div style = ' color:Blue'> Blue = Adenine;</div>
            <div style='color:yellow'> Yellow = Thymine; </div>
        </div>
    </div>
    <div id='txt'> DNA Replication </div>
    <div id='DStrand'></div>
    <div id='Topo' display='inline-block' position='absolute'> </div>

    <div id="text">
        <div id='chapter10' class='chapter'> Chapter 10: Gene Control </div>

        <div class='bigspacer'></div>
        <div class='bigspacer'> Click the black boxes to reveal the definitions. </div>
        <div class='spacer'></div>

        <div id='term1' class='term'> Biology </div>
        <div id='def1' class='def' onclick='reveal(1)'> The scientific study of life. </div>

        <div class='spacer'></div>

        <div class='bigspacer'> </div>

        <button onclick="hide()"> Click to cover definitions. </button>

        <div class='bigspacer'> </div>

        <div id='chapter11' class='chapter'> Chapter 11: How Cells Reproduce </div>

        <div class='bigspacer'></div>
        <div class='bigspacer'> Click the black boxes to reveal the definitions. </div>
        <div class='spacer'></div>

        <div id='term5' class='term'> Mitosis </div>
        <div id='def5' class='def' onclick='reveal(5)'> Nuclear division mechanism that eukaryotes use to produce more
            cells while maintaining the same number of chromosones. </div>
        <div id='term5h' class='term'> </div>

        <button id='term5b' onclick='mitose()'> Video </button>
        <button id=' term5bb' onclick='closeanimation()'> Close Video</button>


        <div class='bigspacer'> </div>

        <div id='chapter12' class='chapter'> Chapter 12: Meiosis and Sexual Reproduction </div>

        <div class='bigspacer'> </div>
    </div>
    <div id='container'>
        <div id='player'> </div>
    </div>

    <script>
        function reveal(num) {
            let string = "def" + num;
            document.getElementById(string).style.backgroundColor = "white";
        }

        function hide() {
            document.getElementById("def1").style.backgroundColor = "black";
            document.getElementById("def2").style.backgroundColor = "black";
            document.getElementById("def3").style.backgroundColor = "black";
            document.getElementById("def4").style.backgroundColor = "black";
            document.getElementById("def5").style.backgroundColor = "black";
            document.getElementById("def6").style.backgroundColor = "black";
            document.getElementById("def7").style.backgroundColor = "black";
            document.getElementById("def8").style.backgroundColor = "black";
            document.getElementById("def9").style.backgroundColor = "black";
            document.getElementById("def10").style.backgroundColor = "black";
            document.getElementById("def11").style.backgroundColor = "black";
            document.getElementById("def12").style.backgroundColor = "black";
            document.getElementById("def13").style.backgroundColor = "black";
            document.getElementById("def14").style.backgroundColor = "black";
            document.getElementById("def15").style.backgroundColor = "black";
        }

        let tag = document.createElement('script');
        tag.src = "http://www.youtube.com/player_api";
        let firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        let player;

        // sets up the youtube video
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '405',
                width: '720',
                videoId: 'C6hn3sA0ip0',
            });
        }

        // makes the video open up when button is clicked and plays the video
        function mitose() {
            document.getElementById('container').style.width = "50%";
            document.getElementById('container').style.height = "50%";
            document.getElementById('container').style.border = "2px solid black";
            document.getElementById('container').style.display = 'block';
            player.playVideo();
        }

        // closes the video and pauses it
        function closeanimation() {
            player.pauseVideo();
            document.getElementById('container').style.display = 'none';

        }

        let canvas = document.getElementById('drawingpane');
        let ctx = canvas.getContext('2D');

        let rects = [];

        let SineCurve = {
            x: null,
            y: null,
            graphic: null,
            render: function (ctx) {
                ctx.fillStyle = this.color;
                ctx.beginPath();

                for (x = 0; x <= 720; x += 1) {
                    y = 180.0 - .3 * (Math.sin(1.5 * x * Math.PI / 180) * 120);
                    ctx.lineTo(x, y);
                }
                ctx.moveTo(0, 180);
                for (x = -120; x <= 600; x += 1) {
                    y = 180.0 - .3 * (Math.sin(1.5 * x * Math.PI / 180) * 120);
                    ctx.lineTo(x + 120, y);
                }
                ctx.stroke();
            }
        }
        let Base = {
            x: 25,
            y: 157,
            width: 5,
            height: 40,
            color: "red",
            text: "",
            name: "",
            location: null,
            graphic: null,
            group: null,
            render: function (ctx) {
                ctx.fillStyle = this.color;
                canvas.text = "bold 14px verdana, sans-serif";
                this.text.color = 'blue';
                ctx.fillText(this.text, this.x, this.y);
                ctx.fillRect(this.x, this.y, this.width, this.height);
            }
        }
        let line = {
            name: 'line',
            x: 720,
            y: 145,
            end: 0,
            goal: 145,
            graphic: null,
            render: function (ctx) {
                ctx.beginPath();
                ctx.lineWidth = 1;
                ctx.strokeStyle = "black";
                ctx.moveTo(this.x, this.y);
                ctx.lineTo(this.end, this.goal);
                ctx.stroke()
            }
        }
        let Triangle = {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            color: 'rgba(0,0,0,1)',
            render: function (ctx) {
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.moveTo(this.x + (1 / 2) * (this.width), this.y);
                ctx.lineTo(this.x, this.y + this.height);
                ctx.lineTo(this.x + this.width, this.y + this.height);
                ctx.fill();
            }
        };

        function initialize() {
            SineCurve.graphic = document.getElementById('DStrand')
            resetCanvas();
        }

        // when start animation button is clicked, lick is called and it creates the double helix with the DNA bases
        function lick() {
            document.getElementById('startanimation').style.display = 'none';
            document.getElementById('pause').style.display = 'block';

            drawing = Object.assign({}, SineCurve);
            rects.push(drawing);
            for (j = 0; j < 6; j++) {
                for (i = 0; i < 3; i++) {
                    DNA = Object.assign({}, Base);
                    DNA.x = DNA.x + (12 * i) + 120 * j;
                    DNA.y = DNA.y - (5 * i);
                    DNA.height = .5 * (DNA.height + (11 * i) + (i ^ 3) * 2);
                    DNA.group = j;
                    if (Math.random() > 0.75) {
                        DNA.color = 'blue';
                    } else if (Math.random() > 0.5) {
                        DNA.color = 'yellow';
                    } else if (Math.random() > 0.25) {
                        DNA.color = 'green';
                    }
                    DNA.location = 'top';
                    rects.push(DNA);

                    DNA2 = Object.assign({}, Base);
                    DNA2.x = DNA2.x + (12 * i) + 120 * j;
                    DNA2.y = DNA.y + DNA.height;
                    DNA2.height = .5 * (DNA2.height + (11 * i) + (i ^ 3) * 2);
                    DNA2.group = j;
                    if (DNA.color == 'red') {
                        DNA2.color = 'green';
                    } else if (DNA.color == 'green') {
                        DNA2.color = 'red';
                    } else if (DNA.color == 'yellow') {
                        DNA2.color = 'blue';
                    } else {
                        DNA2.color = 'yellow'
                    }
                    DNA2.location = 'bottom';
                    rects.push(DNA2);
                }
            }

            for (j = 0; j < 6; j++) {
                for (i = 0; i < 3; i++) {
                    DNA = Object.assign({}, Base);
                    DNA.x = DNA.x + 60;
                    DNA.x = DNA.x - (12 * i) + 120 * j;
                    DNA.y = DNA.y - (5 * i);
                    DNA.height = .5 * (DNA.height + (12 * i) + (i ^ 3) * 2 + 3);
                    DNA.group = j;
                    if (Math.random() > 0.75) {
                        DNA.color = 'blue';
                    } else if (Math.random() > 0.5) {
                        DNA.color = 'yellow';
                    } else if (Math.random() > 0.25) {
                        DNA.color = 'green';
                    }
                    DNA.location = 'top';
                    rects.push(DNA);

                    DNA2 = Object.assign({}, Base);
                    DNA2.x = DNA2.x + 60;
                    DNA2.x = DNA2.x - (12 * i) + 120 * j;
                    DNA2.y = DNA.y + DNA.height;
                    DNA2.height = .5 * (DNA2.height + (12 * i) + (i ^ 3) * 2 + 3);
                    DNA2.group = j;

                    if (DNA.color == 'red') {
                        DNA2.color = 'green';
                    } else if (DNA.color == 'green') {
                        DNA2.color = 'red';
                    } else if (DNA.color == 'yellow') {
                        DNA2.color = 'blue';
                    } else {
                        DNA2.color = 'yellow'
                    }
                    DNA2.location = 'bottom';
                    rects.push(DNA2);
                }
            }

            initialize();
            setTimeout(unwind, 1000);
            document.getElementById('txt').innerHTML = 'Topoisemerase Unwinds the Double Helix';

        }
        let go = true;

        // if pause button is clicked, the animation stops
        function pau() {
            document.getElementById('pause').style.display = 'none';
            document.getElementById('resume').style.display = 'block';
            document.getElementById('resume').style.backgroundColor = 'green';
            go = false;
        }

        // if resume button is clicked, animation continues
        function resume() {
            document.getElementById('resume').style.display = 'none';
            document.getElementById('pause').style.display = 'block';
            go = true;
            if (temp < 244) {
                window.requestAnimationFrame(unwind);
            } else if (time < 400) {
                window.requestAnimationFrame(helicase);
            } else if (shift < 80) {
                window.requestAnimationFrame(RNAprimer);
            } else if (z < 200) {
                window.requestAnimationFrame(rna);
            } else if (tttimer < 120) {
                window.requestAnimationFrame(removeprimase);
            } else if (step4 < 520) {
                window.requestAnimationFrame(DNAPolymerase);
            } else if (exo < 80) {
                window.requestAnimationFrame(Exonuclease);
            } else if (remR < 250) {
                window.requestAnimationFrame(removeRNA);
            } else if (dp2 < 80) {
                window.requestAnimationFrame(DnP2);
            } else if (Come < 200) {
                window.requestAnimationFrame(DNACome);
            }
        }
        let temp = 0;

        // 2 rectangles go from the right to the left, replacing the double helix with 2 straight lines
        function unwind() {
            if (go == true) {
                if (temp < 244) {
                    temp = temp + 1;
                    window.requestAnimationFrame(unwind);
                    if (temp > 1) {
                        rects.pop();
                        rects.pop();
                    }
                    Background = Object.assign({}, Base);
                    Background.color = 'white';
                    Background.x = 720 - 3 * temp;
                    Background.y = 120;
                    Background.width = 100;
                    Background.height = 120;
                    Background.name = 'whiteB';
                    rects.splice(1, 0, Background);

                    Border = Object.assign({}, Base);
                    Border.x = 720 - 3 * temp;
                    Border.y = 140;
                    Border.height = 80;
                    Border.width = 70;
                    Border.color = 'black';
                    Topoisemerase = Object.assign({}, Base);
                    Border.text = "Topoisemerase";
                    Topoisemerase.x = Border.x + 5;
                    Topoisemerase.height = Border.height - 10;
                    Topoisemerase.width = Border.width - 10;
                    Topoisemerase.y = Border.y + 5;

                    let move = [];
                    while (rects.length != 1) {
                        let remove = rects.pop();
                        if (remove.x > (Topoisemerase.x + Topoisemerase.width)) {

                            if (remove.location == 'top') {
                                remove.y = 145;
                                remove.height = 25;

                            } else if (remove.location == 'bottom') {
                                remove.y = 219 - remove.height
                                remove.height = 25;
                            }
                        }
                        move.push(remove);

                    }
                    while (move.length != 0) {
                        let t = move.pop();
                        rects.push(t);
                    }
                    let line1 = Object.assign({}, line);
                    line1.end = 720 - 3 * temp;

                    let line2 = Object.assign({}, line);
                    line2.y = 219;
                    line2.goal = 219;
                    line2.end = 720 - 3 * temp;

                    rects.push(line2);
                    rects.push(line1);
                    rects.push(Border);
                    rects.push(Topoisemerase);
                    initialize();
                } else {
                    lines();
                }
            }
        }

        // draws the lines
        function lines() {
            let acids = [];
            rects.pop();
            rects.pop();
            rects.shift();

            while (rects.length != 0) {
                let temp = rects.pop();
                if (temp.name != 'whiteB') {
                    if (temp.name != 'line') {
                        temp.height = 25;
                        if (temp.location == 'top') {
                            temp.y = 145;
                        } else {
                            temp.y = 195
                        }
                    }
                    acids.push(temp);
                }
            }

            while (acids.length != 0) {
                let te = acids.pop();
                rects.push(te);
            }

            resetCanvas();
            document.getElementById('txt').innerHTML = 'Helicase unzips the strand, creating the replication fork';
            setTimeout(helicase, 1000);
        }
        let time = 0;

        // 2 rectangles go from right to left changing the y-values
        function helicase() {
            if (go == true) {
                if (time < 400) {
                    time = time + 1;
                    window.requestAnimationFrame(helicase);

                    if (time > 1) {
                        rects.pop();
                        rects.pop();
                    }

                    HBorder = Object.assign({}, Base);
                    HBorder.x = 740 - 2 * time;
                    HBorder.y = 130;
                    HBorder.height = 100;
                    HBorder.width = 70;
                    HBorder.color = 'Brown';
                    Helicase = Object.assign({}, Base);
                    HBorder.text = "Helicase";
                    Helicase.x = HBorder.x + 5;
                    Helicase.color = 'grey';
                    Helicase.height = HBorder.height - 10;
                    Helicase.width = HBorder.width - 10;
                    Helicase.y = HBorder.y + 5;

                    Back = Object.assign({}, Base);
                    Back.color = 'white';
                    Back.x = Helicase.x;
                    Back.y = Helicase.y + 5;
                    Back.width = Helicase.width;
                    Back.height = Helicase.height;
                    rects.splice(rects.length, 0, Back);

                    rects.push(HBorder);
                    rects.push(Helicase);

                    let unzip = [];
                    let tline1 = Object.assign({}, line);
                    let tline2 = Object.assign({}, line);

                    while (rects.length != 1) {
                        let rem = rects.pop();
                        if (rem.x > (Helicase.x + Helicase.width)) {

                            if (rem.location == 'top') {
                                rem.y = 105;
                                rem.height = 25;

                            } else if (rem.location == 'bottom') {
                                rem.y = 259 - rem.height
                                rem.height = 25;

                            }
                            if (rem.name == 'line' && rem.end > (Helicase.x + Helicase.width)) {

                                if (rem.y > 150) {
                                    rem.y = 105;
                                    rem.goal = 105;
                                    tline1.x = Helicase.x;
                                    tline1.y = Helicase.y;
                                    tline1.end = Helicase.x + Helicase.width;
                                    tline1.goal = rem.y;
                                } else {
                                    rem.y = 259;
                                    rem.goal = 259;
                                    tline2.x = Helicase.x;
                                    tline2.y = Helicase.y + Helicase.height;
                                    tline2.end = Helicase.x + Helicase.width;
                                    tline2.goal = rem.y
                                }
                            }
                        }
                        unzip.push(rem);
                    }
                    while (unzip.length != 0) {
                        let a = unzip.pop();
                        rects.push(a);

                    }
                    if (time > 1) {
                        rects.shift();
                        rects.shift();
                    }
                    rects.splice(0, 0, tline2);
                    rects.splice(0, 0, tline1);

                    resetCanvas();
                } else {
                    document.getElementById('txt').innerHTML =
                        'RNA Primase adds RNA bases to create a primer, which marks the starting point for the construction of the new DNA ';
                    primase();
                }
            }
        }

        //deletes unnecessary, inconvenient objects in the array
        function primase() {
            rects.pop();
            rects.pop();
            rects.shift();
            rects.shift();
            resetCanvas();
            setTimeout(RNAprimer, 1000)
        }

        let shift = 0;

        // 2 Rectangles attach to the end of the line 
        function RNAprimer() {
            if (go == true) {
                if (shift < 80) {
                    shift = shift + 1;
                    window.requestAnimationFrame(RNAprimer);

                    if (shift > 1) {
                        rects.pop();
                        rects.pop();
                    }
                    let primase = Object.assign({}, Base);
                    primase.x = 790 - 2 * shift;
                    primase.y = 40 + 0.7 * shift;
                    primase.width = 70;
                    primase.height = 60;
                    primase.color = 'rgba(144, 23, 214, 0.36)';
                    primase.text = 'RNA Primase';

                    let primasebox = Object.assign({}, Base);
                    primasebox.x = primase.x + 5;
                    primasebox.y = primase.y + 5;
                    primasebox.width = primase.width - 10;
                    primasebox.height = primase.height - 10;
                    primasebox.color = 'rgba(23, 214, 207, 0.2)';

                    rects.push(primase);
                    rects.push(primasebox)
                    resetCanvas();
                } else {
                    rna();
                }
            }
        }

        let z = 0;
        // 2 RNA Bases (Rectangles) attach to the line
        function rna() {
            if (go == true) {
                if (z < 200) {
                    if (z > 0) {
                        rects.pop();
                        rects.pop();
                        rects.pop();
                        rects.pop();
                    }
                    z = z + 1;
                    window.requestAnimationFrame(rna);
                    let rna1 = Object.assign({}, Base);
                    let rna1Border = Object.assign({}, Base);
                    let rna2 = Object.assign({}, Base);
                    let rna2Border = Object.assign({}, Base);

                    rna1Border.width = 5;
                    rna1Border.height = 25;
                    rna1Border.x = 985 - 1.5 * z;

                    rna1Border.y = 10 + 0.6 * z;
                    rna1Border.color = 'black';

                    rna1.width = 3;
                    rna1.height = 21;
                    rna1.x = rna1Border.x + 1;
                    rna1.y = rna1Border.y + 2;

                    if (rects[66].color == 'red') {
                        rna1.color = 'rgb(133, 255, 89)';
                    } else if (rects[66].color == 'green') {
                        rna1.color = 'rgb(247, 104, 79)';
                    } else if (rects[66].color == 'blue') {
                        rna1.color = 'rgb(243, 247, 126)';
                    } else {
                        rna1.color = 'rgb(104, 160, 249)';
                    }
                    if (rects[68].color == 'red') {
                        rna2.color = 'rgb(133, 255, 89)';
                    } else if (rects[68].color == 'green') {
                        rna2.color = 'rgb(247, 104, 79)';
                    } else if (rects[68].color == 'blue') {
                        rna2.color = 'rgb(243, 247, 126)';
                    } else {
                        rna2.color = 'rgb(104, 160, 249)';
                    }


                    rna2Border.width = 5;
                    rna2Border.height = 25;
                    rna2Border.x = 973 - 1.5 * z;
                    rna2Border.y = 10 + 0.6 * z;

                    rna2Border.color = 'black'

                    rna2.width = 3;
                    rna2.height = 21;
                    rna2.x = rna2Border.x + 1;
                    rna2.y = rna2Border.y + 2;

                    rects.push(rna1Border);
                    rects.push(rna2Border);
                    rects.push(rna1);
                    rects.push(rna2);

                    resetCanvas();
                } else {
                    let Btemp = rects.splice(960, 2);
                    rects.push(Btemp[0]);
                    rects.push(Btemp[1]);
                    resetCanvas();
                    removeprimase();
                }
            }
        }
        let tttimer = 0;

        //Primase rectangles move off the screen
        function removeprimase() {
            if (go == true) {
                if (tttimer < 120) {

                    let bigb = rects.pop();
                    let smallb = rects.pop();
                    tttimer = tttimer + 1;
                    window.requestAnimationFrame(removeprimase);
                    bigb.x = 630 + 5 * tttimer;
                    smallb.x = 635 + 5 * tttimer;

                    rects.push(bigb);
                    rects.push(smallb);
                    resetCanvas();
                } else {
                    rects.pop();
                    rects.pop();
                    resetCanvas();
                    document.getElementById('txt').innerHTML =
                        "DNA Polymerase adds complementary nucleotides, always from the 5' to 3' end";
                    preDNAPolymerase();
                }
            }

        }

        // copies all the DNA bases on the bottom to an array
        function copDNA() {
            let copyDNA = [];
            for (let i = 0; i < rects.length + 1; i++) {
                if (i == (rects.length)) {
                    copyDNA.splice(34, 1)
                    copyDNA.splice(33, 1);
                    break;
                } else if (rects[i].location == 'bottom') {
                    copyDNA.push(rects[i]);
                }
            }
            return copyDNA;
        }

        // this function allows for an array to be deep copied
        function copy(aObject) {
            if (!aObject) {
                return aObject;
            }
            let v;
            let bObject = Array.isArray(aObject) ? [] : {};
            for (const k in aObject) {
                v = aObject[k];
                bObject[k] = (typeof v === "object") ? copy(v) : v;
            }

            return bObject;
        }
        let Drep;

        function preDNAPolymerase() {
            Drep = copDNA();
            DNAPolymerase();
        }

        let step4 = 0;

        // 2 Rectangles go right to left and DNA Bases (rectangles) are added as the Rectangle goes over the line 
        function DNAPolymerase() {
            if (go == true) {
                let DNArep = copy(Drep);
                if (step4 < 520) {
                    step4 = step4 + 1;

                    if (step4 > 1) {
                        rects.pop();
                        rects.pop();
                    }
                    let Polym = Object.assign({}, Base);
                    Polym.x = 950 - 2 * step4;
                    Polym.y = 100;
                    Polym.width = 70;
                    Polym.height = 60;
                    Polym.color = 'brown';
                    Polym.text = 'DNA Polymerase';

                    let PolymBox = Object.assign({}, Base);
                    PolymBox.x = Polym.x + 5;
                    PolymBox.y = Polym.y + 5;
                    PolymBox.width = Polym.width - 10;
                    PolymBox.height = Polym.height - 10;
                    PolymBox.color = 'green';

                    for (let i = 0; i < DNArep.length; i++) {
                        if (DNArep[i].x > (Polym.x + Polym.width)) {
                            let tempDNArep = DNArep[i];
                            tempDNArep.y = 130;
                            Drep.splice(i, 1);
                            DNArep.splice(i, 1);
                            rects.push(tempDNArep);
                        }
                    }
                    window.requestAnimationFrame(DNAPolymerase);

                    rects.push(Polym);
                    rects.push(PolymBox)
                    resetCanvas();

                } else {
                    document.getElementById("txt").innerHTML = 'Exonuclease removes the RNA Bases';
                    Exonuclease();
                }
            }
        }

        let exo = 0;
        // 2 Rectangles attach to the end of the line
        function Exonuclease() {
            if (go == true) {
                if (exo < 80) {
                    exo = exo + 1;
                    window.requestAnimationFrame(Exonuclease);

                    if (exo > 1) {
                        rects.shift();
                        rects.shift();
                    }
                    let ExoN = Object.assign({}, Base);
                    ExoN.x = 790 - 2 * exo;
                    ExoN.y = 40 + 0.7 * exo;
                    ExoN.width = 70;
                    ExoN.height = 60;
                    ExoN.color = 'orange';
                    ExoN.text = 'Exonuclease';

                    let ExoNBox = Object.assign({}, Base);
                    ExoNBox.x = ExoN.x + 5;
                    ExoNBox.y = ExoN.y + 5;
                    ExoNBox.width = ExoN.width - 10;
                    ExoNBox.height = ExoN.height - 10;
                    ExoNBox.color = 'pink';

                    rects.unshift(ExoNBox)
                    rects.unshift(ExoN);

                    resetCanvas();
                } else {
                    removeRNA();
                }
            }
        }

        let remR = 0;

        //the RNA Rectangles move off the screen
        function removeRNA() {
            if (go == true) {
                if (remR < 250) {
                    remR++;
                    window.requestAnimationFrame(removeRNA);
                    if (remR < 100) {
                        let r1 = rects.splice(962, 4);
                        for (let i = 0; i < 4; i++) {
                            r1[i].x = r1[i].x + remR;
                            r1[i].y = r1[i].y - remR;
                        }

                        for (let i = 3; i > -1; i--) {
                            rects.splice(962, 0, r1[i]);
                        }
                        resetCanvas();
                    } else {
                        let exo = rects.shift();
                        let exob = rects.shift();
                        exo.x = 630 + 2 * (remR - 100);
                        exo.y = 96 - (remR - 100);
                        exob.x = 635 + 2 * (remR - 100);
                        exob.y = 101 - (remR - 100);

                        rects.unshift(exob);
                        rects.unshift(exo);
                        resetCanvas();
                    }

                } else {
                    rects.shift();
                    rects.shift();
                    document.getElementById("txt").innerHTML =
                        'Now, DNA Polymerase replaces the removed RNA bases with the proper DNA bases';
                    setTimeout(DnP2, 1000)

                }
            }
        }

        let dp2 = 0
        // DNA Polymerase appears again and does the same thing
        function DnP2() {
            if (go == true) {
                if (dp2 < 80) {
                    dp2 = dp2 + 1;
                    window.requestAnimationFrame(DnP2);

                    if (dp2 > 1) {
                        rects.pop();
                        rects.pop();
                    }
                    let Dp2 = Object.assign({}, Base);
                    Dp2.x = 950 - 4 * dp2;
                    Dp2.y = 40 + 0.7 * dp2;
                    Dp2.width = 70;
                    Dp2.height = 60;
                    Dp2.color = 'rgba(102,51,51,0.3)';
                    Dp2.text = 'DNAPolymerase';

                    let Dp2B = Object.assign({}, Base);
                    Dp2B.x = Dp2.x + 5;
                    Dp2B.y = Dp2.y + 5;
                    Dp2B.width = Dp2.width - 10;
                    Dp2B.height = Dp2.height - 10;
                    Dp2B.color = 'rgba(0,153,51,0.3)';

                    rects.push(Dp2);
                    rects.push(Dp2B)


                    resetCanvas();
                } else {
                    DNACome();
                }
            }
        }
        let Come = 0;
        // new rectangles (DNA Bases) appear and move towards their appropiate spots
        function DNACome() {
            if (go == true) {
                if (Come < 200) {
                    if (Come > 0) {
                        rects.pop();
                        rects.pop();
                    }
                    Come++;
                    window.requestAnimationFrame(DNACome);
                    let D1 = Object.assign({}, Base);
                    let D2 = Object.assign({}, Base);

                    D1.width = 5;
                    D1.height = 25;
                    D1.x = 985 - 1.5 * Come;
                    D1.y = 10 + 0.6 * Come;

                    if (rects[66].color == 'red') {
                        D1.color = 'green';
                    } else if (rects[66].color == 'green') {
                        D1.color = 'red';
                    } else if (rects[66].color == 'blue') {
                        D1.color = 'yellow';
                    } else {
                        D1.color = 'blue';
                    }
                    if (rects[68].color == 'red') {
                        D2.color = 'green';
                    } else if (rects[68].color == 'green') {
                        D2.color = 'red';
                    } else if (rects[68].color == 'blue') {
                        D2.color = 'yellow';
                    } else {
                        D2.color = 'blue';
                    }
                    D2.width = 5;
                    D2.height = 25;
                    D2.x = 973 - 1.5 * Come;
                    D2.y = 10 + 0.6 * Come;

                    rects.push(D1);
                    rects.push(D2);
                    resetCanvas();
                } else {
                    rects.splice(rects.length - 4, 2)
                    resetCanvas();
                    linell();
                }
            }
        }

        // adds the line to the replicated DNA strand
        function linell() {
            let copyline = Object.assign({}, line);
            copyline.x = 720;
            copyline.end = 10;
            copyline.y = 155;
            copyline.goal = 155;
            rects.push(copyline);
            resetCanvas();
        }

        // renders every object onto the canvas
        function drawPane() {
            for (let i = 0; i < rects.length; i++) {
                rects[i].render(ctx)
            }
        }

        function resetCanvas() {
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
            ctx = canvas.getContext('2d');
            drawPane();


        }
        window.onload = resetCanvas;
        window.onresize = resetCanvas;
    </script>
</body>

</html>